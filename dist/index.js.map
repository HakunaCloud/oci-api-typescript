{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFile } from 'fs';\nimport * as https from 'https';\nimport * as httpSignature from 'http-signature'\nimport * as jssha from 'jssha'\nimport { VNIC, Instance, Compartment } from './models'\n\nexport interface ClientConfig {\n    keyPath: string;\n    tenantID: string;\n    userID: string;\n    fingerprint: string;\n    zone:\n        'ap-tokyo-1' |\n        'ca-toronto-1' |\n        'eu-frankfurt-1' |\n        'uk-london-1' |\n        'us-ashburn-1' |\n        'us-phoenix-1';\n}\n\nexport class Client {\n    private key: string\n    private keyId: string\n    private config: ClientConfig\n    constructor(config: ClientConfig) {\n        this.config = config;\n        this.keyId = [\n            this.config.tenantID,\n            this.config.userID,\n            this.config.fingerprint\n        ].join('/')\n\n    }\n    private init(): Promise<void> {\n        return new Promise(resolve => {\n            if (typeof this.key !== 'undefined') {\n                return resolve()\n            }\n            // Read the key\n            readFile(this.config.keyPath, (err, data) => {\n                if (err) {\n                    throw new Error(err.message);\n                }\n                this.key = data.toString();\n                resolve()\n            })\n        })\n    }\n    doRequest(method: string, host: string, path: string, data?: any) {\n        return new Promise(async resolve => {\n            await this.init();\n            const options: https.RequestOptions = {\n                host,\n                method,\n                path,\n            }\n            const request = https.request(options, res => {\n                let body = ''\n                res.on('data', chunk => body += chunk)\n                res.on('end', () => {\n                    resolve(JSON.parse(body))\n                })\n            })\n            // Signign process\n            let headersToSign = ['host', 'date', '(request-target)']\n            if (['POST', 'PUT'].includes(method.toUpperCase())) {\n                data = data || ''\n                const shaObj = new jssha('SHA-256', 'TEXT')\n                shaObj.update(data)\n                request.setHeader('Content-Type', 'application/json')\n                request.setHeader('Content-Length', data.length)\n                request.setHeader('x-content-sha256', shaObj.getHash('B64'))\n                headersToSign = headersToSign.concat([\n                    'content-type',\n                    'content-length',\n                    'x-content-sha256'\n                ])\n            }\n            httpSignature.sign(request, {\n                key: this.key,\n                keyId: this.keyId,\n                headers: headersToSign\n            })\n            request.end()\n        })\n    }\n    Core = {\n        GetInstance: (id: string): Promise<Instance> => {\n            return this.doRequest('GET', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/instances/${id}`) as Promise<Instance>\n        },\n        ListIntances: (compartmentId: string): Promise<Instance[]> => {\n            return this.doRequest('GET', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/instances?compartmentId=${compartmentId}`) as Promise<Instance[]>\n        },\n        InstanceAction: (id: string, action: 'STOP' | 'START' | 'SOFTRESET' | 'RESET' | 'SOFTSTOP'): Promise<Instance> => {\n            return this.doRequest('POST', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/instances/${id}?action=${action}`) as Promise<Instance>\n        },\n        ListVnicAttachments: (compartmentId: string, instanceId?: string): Promise<VNIC[]> => {\n            return this.doRequest('GET', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/vnicAttachments?compartmentId=${compartmentId}&instanceId=${instanceId || ''}`) as Promise<VNIC[]>\n        },\n        GetVnic: (vnicId: string): Promise<VNIC> => {\n            return this.doRequest('GET', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/vnics/${vnicId}`) as Promise<VNIC>\n        }\n    }\n    IAM = {\n        ListCompartments: (): Promise<Compartment> => {\n            return this.doRequest('GET', `identity.${this.config.zone}.oraclecloud.com`, `/20160918/compartments?compartmentId=${this.config.tenantID}&compartmentIdInSubtree=true&accessLevel=ACCESSIBLE`) as Promise<Compartment>\n        }\n    }\n};\n"]}