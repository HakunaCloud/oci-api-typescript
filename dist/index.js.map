{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFile } from 'fs';\nimport * as https from 'https';\nimport * as httpSignature from 'http-signature'\nimport * as jssha from 'jssha'\nimport * as backoff from 'backoff'\nimport { VNIC, Instance, Compartment, InstanceState, VNICAttachment } from './models'\n\nexport interface ClientConfig {\n    key: string;\n    tenantID: string;\n    userID: string;\n    fingerprint: string;\n    zone:\n        'ap-tokyo-1' |\n        'ca-toronto-1' |\n        'eu-frankfurt-1' |\n        'uk-london-1' |\n        'us-ashburn-1' |\n        'us-phoenix-1';\n}\n\nexport class Client {\n    private keyId: string\n    private config: ClientConfig\n    constructor(config: ClientConfig) {\n        this.config = config;\n        this.keyId = [\n            this.config.tenantID,\n            this.config.userID,\n            this.config.fingerprint\n        ].join('/')\n\n    }\n    private doRequest(method: string, host: string, path: string, data?: any) {\n        return new Promise(async (resolve, reject) => {\n            const options: https.RequestOptions = {\n                host,\n                method,\n                path,\n            }\n            const request = https.request(options, res => {\n                let body = ''\n                res.on('data', chunk => body += chunk)\n                res.on('close', () => {\n                    const response = JSON.parse(body);\n                    if (res.statusCode !== 200) {\n                        return reject(response)\n                    }\n                    resolve(response)\n                })\n                res.on('error', err => {\n                    reject(err);\n                })\n            })\n            // Signign process\n            let headersToSign = ['host', 'date', '(request-target)']\n            if (['POST', 'PUT'].includes(method.toUpperCase())) {\n                data = data || ''\n                const shaObj = new jssha('SHA-256', 'TEXT')\n                shaObj.update(data)\n                request.setHeader('Content-Type', 'application/json')\n                request.setHeader('Content-Length', data.length)\n                request.setHeader('x-content-sha256', shaObj.getHash('B64'))\n                headersToSign = headersToSign.concat([\n                    'content-type',\n                    'content-length',\n                    'x-content-sha256'\n                ])\n            }\n            httpSignature.sign(request, {\n                key: this.config.key,\n                keyId: this.keyId,\n                headers: headersToSign\n            })\n            request.end()\n        })\n    }\n    util = {\n        waitForInstanceState: (instanceId: string, state: InstanceState): Promise<Instance> => {\n            return new Promise<Instance>((resolve, reject) => {\n                let lastSeen: InstanceState\n                const exponential = backoff.exponential({\n                    initialDelay: 100,\n                    maxDelay: 1000\n                })\n                exponential.failAfter(50)\n                exponential.on('ready', async () => {\n                    const instance = await this.Core.GetInstance(instanceId)\n                    lastSeen = instance.lifecycleState\n                    if (instance.lifecycleState !== state) {\n                        return exponential.backoff()\n                    }\n                    exponential.reset()\n                    resolve(instance)\n                })\n                exponential.on('fail', () => {\n                    reject(`instance not in desired state: \"${state}\", last seen state: \"${lastSeen}\"`)\n                })\n                exponential.backoff()\n            })\n        }\n    }\n    Core = {\n        GetInstance: (id: string): Promise<Instance> => {\n            return this.doRequest('GET', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/instances/${id}`) as Promise<Instance>\n        },\n        ListInstances: (compartmentId: string, lifecycleState?: string): Promise<Instance[]> => {\n            return this.doRequest('GET', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/instances?compartmentId=${compartmentId}&lifecycleState=${lifecycleState}`) as Promise<Instance[]>\n        },\n        InstanceAction: (id: string, action: 'STOP' | 'START' | 'SOFTRESET' | 'RESET' | 'SOFTSTOP'): Promise<Instance> => {\n            return this.doRequest('POST', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/instances/${id}?action=${action}`) as Promise<Instance>\n        },\n        ListVnicAttachments: (compartmentId: string, instanceId?: string): Promise<VNICAttachment[]> => {\n            return this.doRequest('GET', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/vnicAttachments?compartmentId=${compartmentId}&instanceId=${instanceId || ''}`) as Promise<VNICAttachment[]>\n        },\n        GetVnic: (vnicId: string): Promise<VNIC> => {\n            return this.doRequest('GET', `iaas.${this.config.zone}.oraclecloud.com`, `/20160918/vnics/${vnicId}`) as Promise<VNIC>\n        }\n    }\n    IAM = {\n        ListCompartments: (): Promise<Compartment[]> => {\n            return this.doRequest('GET', `identity.${this.config.zone}.oraclecloud.com`, `/20160918/compartments?compartmentId=${this.config.tenantID}&compartmentIdInSubtree=true&accessLevel=ACCESSIBLE`) as Promise<Compartment[]>\n        }\n    }\n};\n"]}